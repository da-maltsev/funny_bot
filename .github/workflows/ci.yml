---
name: CI
on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version-file: '.python-version'

      - uses: actions/cache@v3
        id: cache-dependencies
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/*requirements.txt') }}

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip pip-tools
          pip-sync requirements.txt dev-requirements.txt
      - name: Run the linter
        run: |
          . venv/bin/activate
          cp src/.env.example src/.env
          make lint
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version-file: '.python-version'

      - uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/*requirements.txt') }}

      - name: Install locale stuff
        run: sudo apt-get update && sudo apt-get --no-install-recommends install -y locales-all gettext

      - name: Run the tests
        run: |
          . venv/bin/activate
          export PYTHONPATH=${PWD}/src
          cp src/.env.example src/.env
          make test
  build-docker-image:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version-file: '.python-version'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Store default environment file to be runnable at the developer machine
        run: cp src/.env.example src/.env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image identifier
        id: image
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ steps.image.outputs.lowercase }}:latest
            ghcr.io/${{ steps.image.outputs.lowercase }}:${{ github.sha }}
          build-args: |
            PYTHON_VERSION=${{ steps.setup-python.outputs.python-version }}
            RELEASE=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy:
  #   needs: build-docker-image
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Read image identifiers
  #       id: image
  #       uses: ASzc/change-string-case-action@v1
  #       with:
  #         string: ${{ github.repository }}

  #     - name: Update image
  #       uses: appleboy/ssh-action@v0.1.7
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: circle
  #         key: ${{ secrets.DEPLOY_KEY }}
  #         script: docker service update funny_bot --image ghcr.io/${{ steps.image.outputs.lowercase }}:${{ github.sha }} --with-registry-auth
